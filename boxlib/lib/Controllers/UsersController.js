/**
 * BoxLib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/07/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var UsersController = {

    /**
     * Get the Current User's Information. Retrieves information about the user who
     * is currently logged in i.e. the user for whom this auth token was generated.
     * Returns a single complete user object.
     * An error is returned if a valid auth token is not included in the API request.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {User}
     */
    getUsersMe : function(callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/me";
        
        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Removes an email alias from a user. If the user has permission to remove
     * this email alias, an empty 204 No Content response will be returned to
     *  confirm deletion.
     * @param {string} emailAliasesId    Required parameter: TODO: type description here
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteUsersEmailAliasesByUserId : function(emailAliasesId, userId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}/email_aliases/{email_aliases_id}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "email_aliases_id" : emailAliasesId,
            "userId" : userId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 404) {
                    callback({errorMessage: "The file is not in the trash.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 412) {
                    callback({errorMessage: "Precondition Failed. The precondition given in one or more of the
request-header fields evaluated to false when it was tested on the
server.
", errorCode: 412, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Get All Email Aliases for a User.
     * Retrieves all email aliases for this user. The collection of email aliases
     * does not include the primary login for the user; use GET /users/USER_ID to
     * retrieve the login email address.
     * If the user_id is valid a collection of email aliases will be returned.
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {EmailAliasesCollection}
     */
    getUsersEmailAliasesByUserId : function(userId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}/email_aliases";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "userId" : userId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Add an Email Alias for a User.
     * Adds a new email alias to the given user's account.
     * Returns the newly created email_alias object. Errors will be thrown if the
     * user_id is not valid or the particular user's email alias cannot be modified.
     * @param {NewEmailAlias} body    Required parameter: TODO: type description here
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {EmailAlias}
     */
    createUsersEmailAliasesByUserId : function(body, userId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}/email_aliases";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "userId" : userId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. The server understood the request, but is refusing to
fulfill it.
", errorCode: 403, errorResponse:response.body},null,context);
                } else if (response.statusCode == 405) {
                    callback({errorMessage: "Method Not Allowed. The method specified in the Request-Line is not
allowed for the resource identified by the Request-URI.
", errorCode: 405, errorResponse:response.body},null,context);
                } else if (response.statusCode == 409) {
                    callback({errorMessage: "Conflict. The request could not be completed due to a conflict with
the current state of the resource. Often happened because of file
names duplication.
", errorCode: 409, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Move Folder into Another User's Folder.
     * Moves all of the content from within one user's folder into a new folder in
     * another user's account. You can move folders across users as long as the you
     * have administrative permissions. To move everything from the root folder,
     * use "0" which always represents the root folder of a Box account.
     * @param {UserFolderMove} body    Required parameter: TODO: type description here
     * @param {string} folderId    Required parameter: Folder's identifier
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {bool|null} notify    Optional parameter: Whether the user should receive an email after update
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Folder}
     */
    updateUsersFoldersByUserIdAndFolderId : function(body, folderId, userId, notify, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}/folders/{folderId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId,
            "userId" : userId
        });

        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "notify" : notify
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "PUT",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves all of the group memberships for a given enterprise. Note this is only available to group admins. To get a users groups use the users/me/memberships endpoint.
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {GroupMemberships}
     */
    getUsersMembershipsByUserId : function(userId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}/memberships";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "userId" : userId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Update a User's Information. Used to edit the settings and information abou
     * a user. This method only works for enterprise admins. To roll a user out of
     * the enterprise (and convert them to a standalone free user), update the
     * special `enterprise` attribute to be `null`.
     * Returns the a full user object for the updated user. Errors may be thrown when
     * the fields are invalid or this API call is made from a non-admin account.
     * @param {UserUpdate} body    Required parameter: TODO: type description here
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {bool|null} notify    Optional parameter: Whether the user should receive an email after update
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {UsersResponse}
     */
    updateUsersByUserId : function(body, userId, notify, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "userId" : userId
        });

        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "notify" : notify
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "PUT",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Deletes a user in an enterprise account. An empty 200 response is sent to
     * confirm deletion of the user. If the user still has files in their accoun
     * and the `force` parameter is not sent, an error is returned.
     * @param {string} userId    Required parameter: Box's unique string identifying this user.
     * @param {bool|null} force    Optional parameter: Whether or not the user should be deleted even if this user still own files. 
     * @param {bool|null} notify    Optional parameter: Whether the user should receive an email after update
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteUsersByUserId : function(userId, force, notify, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users/{userId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "userId" : userId
        });

        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "force" : force,
            "notify" : notify
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Get All Users in an Enterprise. Returns a list of all users for the
     * Enterprise along with their user_id, public_name, and login.
     * @param {string|null} filterTerm    Optional parameter: A string used to filter the results to only users starting with the `filter_term` in either the name or the login 
     * @param {int|null} limit    Optional parameter: The number of items to return
     * @param {int|null} offset    Optional parameter: The item at which to begin the response
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {UsersCollection}
     */
    getUsers : function(filterTerm, limit, offset, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "filter_term" : filterTerm,
            "limit" : limit,
            "offset" : offset
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to provision a new user in an enterprise. This method only works
     * for enterprise admins.
     * @param {UsersRequest} body    Required parameter: TODO: type description here
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {UsersResponse}
     */
    createUsers : function(body, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/users";
        
        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = UsersController;