/**
 * BoxLib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/07/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var FilesController = {

    /**
     * Promote an Old Version of a File
     * If there are previous versions of this file, this method can be used to promote one of the older versions to the top of the stack. This actually mints a copy of the old version and puts it on the top of the versions stack. The file will have the exact same contents, the same SHA1/etag, and the same name as the original. Other properties such as comments do not get updated to their former values.
     * @param {FileVersionPromote} body    Required parameter: TODO: type description here
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {FileVersion}
     */
    createFilesVersionsCurrentByFileId : function(body, fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/versions/current";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. The server understood the request, but is refusing to
fulfill it.
", errorCode: 403, errorResponse:response.body},null,context);
                } else if (response.statusCode == 405) {
                    callback({errorMessage: "Method Not Allowed. The method specified in the Request-Line is not
allowed for the resource identified by the Request-URI.
", errorCode: 405, errorResponse:response.body},null,context);
                } else if (response.statusCode == 409) {
                    callback({errorMessage: "Conflict. The request could not be completed due to a conflict with
the current state of the resource. Often happened because of file
names duplication.
", errorCode: 409, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Discards a specific file version to the trash.
     * Trash: Depending on the enterprise settings for this user, the item will either be actually deleted from Box or moved to the trash.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {string} versionId    Required parameter: TODO: type description here
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteFilesVersionsByFileIdAndVersionId : function(fileId, versionId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/versions/{version_id}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId,
            "version_id" : versionId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 404) {
                    callback({errorMessage: "The file is not in the trash.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 412) {
                    callback({errorMessage: "Precondition Failed. The precondition given in one or more of the
request-header fields evaluated to false when it was tested on the
server.
", errorCode: 412, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * If there are previous versions of this file, this method can be used to
     * retrieve metadata about the older versions.
     * **ALERT: Versions are only tracked for Box users with premium accounts.**
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {VersionsCollection}
     */
    getFilesVersionsByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/versions";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to create a copy of a file in another folder. The original version of
     * the file will not be altered.
     * @param {NewItem} body    Required parameter: TODO: type description here
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    createFilesCopyByFileId : function(body, fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/copy";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null, response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 409) {
                    callback({errorMessage: "Will be returned if the intended destination folder is the same, as this
will cause a name collision.
", errorCode: 409, errorResponse:response.body},null,context);
                } else if (response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. The server understood the request, but is refusing to
fulfill it.
", errorCode: 403, errorResponse:response.body},null,context);
                } else if (response.statusCode == 405) {
                    callback({errorMessage: "Method Not Allowed. The method specified in the Request-Line is not
allowed for the resource identified by the Request-URI.
", errorCode: 405, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves an item that has been moved to the trash. The full item will be
     * returned, including information about when the it was moved to the trash.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getFilesTrashByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/trash";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null, response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Permanently deletes an item that is in the trash. The item will no longer
     * exist in Box. This action cannot be undone.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteFilesTrashByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/trash";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 404) {
                    callback({errorMessage: "The file is not in the trash.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 412) {
                    callback({errorMessage: "Precondition Failed. The precondition given in one or more of the
request-header fields evaluated to false when it was tested on the
server.
", errorCode: 412, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves all of the tasks for given file. A collection of mini task objects
     * is returned. If there are no tasks, an empty collection will be returned.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {TaskSummariesCollection}
     */
    getFilesTasksByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/tasks";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves the comments on a particular file, if any exist. A collection of
     * comment objects are returned. If there are no comments on the file, an empty
     * comments array is returned.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {CommentsCollection}
     */
    getFilesCommentsByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/comments";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves the actual data of the file. An optional version parameter can be
     * set to download a previous version of the file.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {string|null} version    Optional parameter: The ID specific version of this file to download.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {mixed}
     */
    getFilesContentByFileId : function(fileId, version, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}/content";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "version" : version
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 302) {
                    callback({errorMessage: "Found", errorCode: 302, errorResponse:response.body},null,context);
                } else if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to retrieve the metadata about a file.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {FilesResponse}
     */
    getFilesByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to update individual or multiple fields in the file object, including
     * renaming the file, changing its description, and creating a shared link
     * for the file. To move a file, change the ID of its parent folder. An optional
     * `If-Match` header can be included to ensure that client only updates the file
     * if it knows about the latest version.
     * @param {FileInformationUpdate} body    Required parameter: TODO: type description here
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {FilesResponse}
     */
    updateFilesByFileId : function(body, fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "PUT",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Discards a file to the trash. The 'etag' of the file can be included as an
     * `If-Match` header to prevent race conditions.
     * Trash: Depending on the enterprise settings for this user, the item will
     * either be actually deleted from Box or moved to the trash.
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteFilesByFileId : function(fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 412) {
                    callback({errorMessage: "If the `If-Match` header is sent and fails.", errorCode: 412, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Restores an item that has been moved to the trash. Default behavior is to
     * restore the item to the folder it was in before it was moved to the trash.
     * If that parent folder no longer exists or if there is now an item with the
     * same name in that parent folder, the new parent folder and/or new name will
     * need to be included in the request.
     * @param {NewItem} body    Required parameter: TODO: type description here
     * @param {string} fileId    Required parameter: Box's unique string identifying this file.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    createFilesByFileId : function(body, fileId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/files/{fileId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "fileId" : fileId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null, response.body,context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = FilesController;