/**
 * BoxLib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/07/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var SharedController = {

    /**
     * Used to retrieve the metadata about a shared item when only given a shared
     * link. Because of varying permission levels for shared links, a password may
     * be required to retrieve the shared item. Once the item has been retrieved,
     * you can make API requests against the actual resource `/files/{id}` or
     * `/folders/{id}` as long as the shared link and optional password are in the
     * header.
     * A full file or folder object is returned if the shared link is valid and the
     * user has access to it. An error may be returned if the link is invalid, if a
     * password is required, or if the user does not have access to the file.
     * @param {string} boxApi    Required parameter: A string containing the shared link and the password, it should be URL encoded, the format is: ```   shared_link=[shared resource's link] shared_link_password=[password for the link] ``` shared_link is mandatory. 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {string}
     */
    getSharedItems : function(boxApi, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/shared_items";
        
        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "BoxApi" : boxApi,
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null, response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    }

};

module.exports = SharedController;