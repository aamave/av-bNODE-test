/**
 * BoxLib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/07/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var FoldersController = {

    /**
     * Retrieves the full metadata about a folder, including information about
     * when it was last updated as well as the files and folders contained in it.
     * The root folder of a Box account is always represented by the id **0**.
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {FoldersResponse}
     */
    getFoldersByFolderId : function(folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves the files and/or folders contained within this folder
     * without any other metadata about the folder.
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {string|null} fields    Optional parameter: Attribute(s) to include in the response
     * @param {int|null} limit    Optional parameter: The number of items to return
     * @param {int|null} offset    Optional parameter: The item at which to begin the response
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {ItemsCollection}
     */
    getFoldersItemsByFolderId : function(folderId, fields, limit, offset, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}/items";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "fields" : fields,
            "limit" : limit,
            "offset" : offset
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to create a copy of a folder in another folder. The original version
     * of the folder will not be altered.
     * @param {NewItem} body    Required parameter: TODO: type description here
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Folder}
     */
    createFoldersCopyByFolderId : function(body, folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}/copy";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 403) {
                    callback({errorMessage: "Forbidden. The server understood the request, but is refusing to
fulfill it.
", errorCode: 403, errorResponse:response.body},null,context);
                } else if (response.statusCode == 405) {
                    callback({errorMessage: "Method Not Allowed. The method specified in the Request-Line is not
allowed for the resource identified by the Request-URI.
", errorCode: 405, errorResponse:response.body},null,context);
                } else if (response.statusCode == 409) {
                    callback({errorMessage: "Conflict. The request could not be completed due to a conflict with
the current state of the resource. Often happened because of file
names duplication.
", errorCode: 409, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Use this to get a list of all the collaborations on a folder i.e. all of
     * the users that have access to that folder.
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {CollaborationsCollection}
     */
    getFoldersCollaborationsByFolderId : function(folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}/collaborations";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves an item that has been moved to the trash. The full item will be
     * returned, including information about when the it was moved to the trash.
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Folder}
     */
    getFoldersTrashByFolderId : function(folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}/trash";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Permanently deletes an item that is in the trash. The item will no longer
     * exist in Box. This action cannot be undone.
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteFoldersTrashByFolderId : function(folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}/trash";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 404) {
                    callback({errorMessage: "The file is not in the trash.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 412) {
                    callback({errorMessage: "Precondition Failed. The precondition given in one or more of the
request-header fields evaluated to false when it was tested on the
server.
", errorCode: 412, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to update information about the folder. To move a folder, update the ID
     * of its parent. To enable an email address that can be used to upload files
     * to this folder, update the `folder_upload_email` attribute. An optional
     * If-Match header can be included to ensure that client only updates the folder
     * if it knows about the latest version.
     * @param {FolderUpdate} body    Required parameter: TODO: type description here
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {FoldersResponse}
     */
    updateFoldersByFolderId : function(body, folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "PUT",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Used to delete a folder. A recursive parameter must be included in order to
     * delete folders that have items inside of them. An optional `If-Match` header
     * can be included to ensure that client only deletes the folder if it knows
     * about the latest version.
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {bool|null} recursive    Optional parameter: Whether to delete this folder if it has items inside of it.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {void}
     */
    deleteFoldersByFolderId : function(folderId, recursive, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "recursive" : recursive
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "DELETE",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,response.body,context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    },


    /**
     * Restores an item that has been moved to the trash. Default behavior is to
     * restore the item to the folder it was in before it was moved to the trash.
     * If that parent folder no longer exists or if there is now an item with the
     * same name in that parent folder, the new parent folder and/or new name
     * will need to be included in the request.
     * @param {NewFolder} body    Required parameter: TODO: type description here
     * @param {string} folderId    Required parameter: The ID of the parent folder 
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {Folder}
     */
    createFoldersByFolderId : function(body, folderId, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/{folderId}";
        
        //Process template parameters
        queryBuilder = APIHelper.appendUrlWithTemplateParameters(queryBuilder, {
            "folderId" : folderId
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 405) {
                    callback({errorMessage: "The item is not in the trash", errorCode: 405, errorResponse:response.body},null,context);
                } else if (response.statusCode == 403) {
                    callback({errorMessage: "The user doesn't have permission to restore items from the trash", errorCode: 403, errorResponse:response.body},null,context);
                } else if (response.statusCode == 409) {
                    callback({errorMessage: "There is an item with the same name in the folder the item is being restored to", errorCode: 409, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Retrieves the files and/or folders that have been moved to the trash. Any
     * attribute in the full files or folders objects can be passed in with the
     * fields parameter to get specific attributes, and only those specific
     * attributes back; otherwise, the mini format is returned for each item by
     * default.
     * Multiple attributes can be passed in separated by commas e.g.
     * `fields=name,created_at`. Paginated results can be retrieved using the limit
     * and offset parameters.
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {ItemsCollection}
     */
    getFoldersTrashItems : function(callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders/trash/items";
        
        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    },


    /**
     * Allows to create new <<objectName | !singularize>>
     * @param {FoldersRequest} body    Required parameter: TODO: type description here
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {FoldersResponse}
     */
    createFolders : function(body, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/folders";
        
        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "content-type" : "application/json; charset=utf-8",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //encapsulate params in to a single body object
        var bodyParams = {
            "body" : body
        };

        //Remove null values
        APIHelper.cleanObject(bodyParams);

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "POST",
            headers: headers,
            body : APIHelper.jsonSerialize(bodyParams),
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
            }
        }
        request(options, cb);
        
    }

};

module.exports = FoldersController;