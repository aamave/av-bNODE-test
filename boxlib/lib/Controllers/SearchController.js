/**
 * BoxLib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/07/2016
 */

var request = require('../Http/Client/RequestClient'),
    configuration = require('../configuration'),
    APIHelper = require('../APIHelper');

var SearchController = {

    /**
     * Searching a User's Account. The search endpoint provides a simple way of
     * finding items that are accessible in a given user's Box account.
     * A collection of search results is returned. If there are no matching search
     * results, the entries array will be empty.
     * ALERT: We'll be adding more types of items returned as search results and more
     * filters on search queries, so as you're parsing the results, be prepared to skip
     * over any types of items your app does not recognize.
     * @param {string} query    Required parameter: The string to search for; can be matched against item names, descriptions, text content of a file, and other fields of the different item types. 
     * @param {int|null} limit    Optional parameter: The number of items to return
     * @param {int|null} offset    Optional parameter: The item at which to begin the response
     * @param {function} callback    Required parameter: Callback function in the form of function(error, response)
     *
     * @return {SearchResults}
     */
    search : function(query, limit, offset, callback){

        //prepare query string for API call;
        var baseUri = APIHelper.formatString(configuration.BASEURI, configuration.version);
        
        var queryBuilder = baseUri + "/search";
        
        //Process query parameters
        queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
            "query" : query,
            "limit" : limit,
            "offset" : offset
        });

        //validate and preprocess url
        var queryUrl = APIHelper.cleanUrl(queryBuilder);
        
        //prepare headers
        var headers = {
            "accept" : "application/json",
            "Authorization" : "Bearer " + configuration.oAuthAccessToken
        };

        //Construct the request
        var options = {
            queryUrl: queryUrl,
            method: "GET",
            headers: headers,
        };
        
        //Build the response processing. 
        function cb(error, response, context) {
            if(error){
                callback({errorMessage: error.message, errorCode: error.code},null,context);
            }else if (response.statusCode >= 200 && response.statusCode <= 206) {
                callback(null,JSON.parse(response.body),context);
            }else{
                //Error handling using HTTP status codes
                if (response.statusCode == 400) {
                    callback({errorMessage: "Bad Request. The request could not be understood by the server due
to malformed syntax.
", errorCode: 400, errorResponse:response.body},null,context);
                } else if (response.statusCode == 401) {
                    callback({errorMessage: "Unauthorized. The request requires user authentication.", errorCode: 401, errorResponse:response.body},null,context);
                } else if (response.statusCode == 404) {
                    callback({errorMessage: "Not Found. The server has not found anything matching the Request-URI.", errorCode: 404, errorResponse:response.body},null,context);
                } else if (response.statusCode == 429) {
                    callback({errorMessage: "Your application is sending too many simultaneous requests.", errorCode: 429, errorResponse:response.body},null,context);
                } else if (response.statusCode == 500) {
                    callback({errorMessage: "We couldn't return the representation due to an internal server error.", errorCode: 500, errorResponse:response.body},null,context);
                } else if (response.statusCode == 507) {
                    callback({errorMessage: "Insufficient Storage. The server is unable to store the representation
needed to complete the request
", errorCode: 507, errorResponse:response.body},null,context);
                } else {
                    callback({errorMessage: "HTTP Response Not OK", errorCode: response.statusCode, errorResponse:response.body},null,context);
                }
            }
        }
        request(options, cb);
        
    }

};

module.exports = SearchController;