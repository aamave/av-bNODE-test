
/**
 * BoxLib
 *
 * This file was automatically generated by APIMATIC v2.0 on 04/07/2016
 */
var BaseModel = require("./BaseModel");
/**
 * Creates a instance of UserUpdate
 *
 * @constructor
 */
function UserUpdate() {
    this.enterprise = null;     
    this.name = null;     
    this.role = null;     
    this.language = null;     
    this.isSyncEnabled = null;     
    this.jobTitle = null;     
    this.phone = null;     
    this.address = null;     
    this.spaceAmount = null;     
    this.trackingCodes = null;     
    this.canSeeManagedUsers = null;     
    this.status = null;     
    this.isExemptFromDeviceLimits = null;     
    this.isExemptFromLoginVerification = null;     
    this.isPasswordResetRequired = null;     
    //Append to variable dictionary
    this._variableDict['isSyncEnabled'] = 'is_sync_enabled';
    this._variableDict['jobTitle'] = 'job_title';
    this._variableDict['spaceAmount'] = 'space_amount';
    this._variableDict['trackingCodes'] = 'tracking_codes';
    this._variableDict['canSeeManagedUsers'] = 'can_see_managed_users';
    this._variableDict['isExemptFromDeviceLimits'] = 'is_exempt_from_device_limits';
    this._variableDict['isExemptFromLoginVerification'] = 'is_exempt_from_login_verification';
    this._variableDict['isPasswordResetRequired'] = 'is_password_reset_required';
}

UserUpdate.prototype = new BaseModel();
UserUpdate.prototype.constructor = BaseModel;

/**
 * Setting this to 'null' will roll the user out of the enterprise and make them a free user.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getEnterprise = function() {
    return this.enterprise;
};

/**
 * Setter for Enterprise
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setEnterprise = function(value) {
    this.enterprise = value;
};

/**
 * The name of this user.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getName = function() {
    return this.name;
};

/**
 * Setter for Name
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setName = function(value) {
    this.name = value;
};

/**
 * This user's enterprise role. Can be 'coadmin' or 'user'.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getRole = function() {
    return this.role;
};

/**
 * Setter for Role
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setRole = function(value) {
    this.role = value;
};

/**
 * The language of this user. ISO 639-1 Language Code.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getLanguage = function() {
    return this.language;
};

/**
 * Setter for Language
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setLanguage = function(value) {
    this.language = value;
};

/**
 * Whether or not this user can use Box Sync.
 *
 * @return {bool|null}
 */
UserUpdate.prototype.getIsSyncEnabled = function() {
    return this.isSyncEnabled;
};

/**
 * Setter for IsSyncEnabled
 * 
 * @param {bool|null} value 
 */
UserUpdate.prototype.setIsSyncEnabled = function(value) {
    this.isSyncEnabled = value;
};

/**
 * The user's job title.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getJobTitle = function() {
    return this.jobTitle;
};

/**
 * Setter for JobTitle
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setJobTitle = function(value) {
    this.jobTitle = value;
};

/**
 * The user's phone number.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getPhone = function() {
    return this.phone;
};

/**
 * Setter for Phone
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setPhone = function(value) {
    this.phone = value;
};

/**
 * The user's address.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getAddress = function() {
    return this.address;
};

/**
 * Setter for Address
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setAddress = function(value) {
    this.address = value;
};

/**
 * The user's total available space amount in byte. A value of '-1' grants unlimited storage.
 *
 * @return {double|null}
 */
UserUpdate.prototype.getSpaceAmount = function() {
    return this.spaceAmount;
};

/**
 * Setter for SpaceAmount
 * 
 * @param {double|null} value 
 */
UserUpdate.prototype.setSpaceAmount = function(value) {
    this.spaceAmount = value;
};

/**
 * An array of key/value pairs set by the user's admin.
 *
 * @return {mixed|null}
 */
UserUpdate.prototype.getTrackingCodes = function() {
    return this.trackingCodes;
};

/**
 * Setter for TrackingCodes
 * 
 * @param {mixed|null} value 
 */
UserUpdate.prototype.setTrackingCodes = function(value) {
    this.trackingCodes = value;
};

/**
 * Whether this user can see other enterprise users in its contact list.
 *
 * @return {bool|null}
 */
UserUpdate.prototype.getCanSeeManagedUsers = function() {
    return this.canSeeManagedUsers;
};

/**
 * Setter for CanSeeManagedUsers
 * 
 * @param {bool|null} value 
 */
UserUpdate.prototype.setCanSeeManagedUsers = function(value) {
    this.canSeeManagedUsers = value;
};

/**
 * Can be 'active' or 'inactive'.
 *
 * @return {string|null}
 */
UserUpdate.prototype.getStatus = function() {
    return this.status;
};

/**
 * Setter for Status
 * 
 * @param {string|null} value 
 */
UserUpdate.prototype.setStatus = function(value) {
    this.status = value;
};

/**
 * Whether to exempt this user from Enterprise device limits.
 *
 * @return {bool|null}
 */
UserUpdate.prototype.getIsExemptFromDeviceLimits = function() {
    return this.isExemptFromDeviceLimits;
};

/**
 * Setter for IsExemptFromDeviceLimits
 * 
 * @param {bool|null} value 
 */
UserUpdate.prototype.setIsExemptFromDeviceLimits = function(value) {
    this.isExemptFromDeviceLimits = value;
};

/**
 * Whether or not this user must use two-factor authentication.
 *
 * @return {bool|null}
 */
UserUpdate.prototype.getIsExemptFromLoginVerification = function() {
    return this.isExemptFromLoginVerification;
};

/**
 * Setter for IsExemptFromLoginVerification
 * 
 * @param {bool|null} value 
 */
UserUpdate.prototype.setIsExemptFromLoginVerification = function(value) {
    this.isExemptFromLoginVerification = value;
};

/**
 * Whether or not the user is required to reset password.
 *
 * @return {bool|null}
 */
UserUpdate.prototype.getIsPasswordResetRequired = function() {
    return this.isPasswordResetRequired;
};

/**
 * Setter for IsPasswordResetRequired
 * 
 * @param {bool|null} value 
 */
UserUpdate.prototype.setIsPasswordResetRequired = function(value) {
    this.isPasswordResetRequired = value;
};

module.exports = UserUpdate;